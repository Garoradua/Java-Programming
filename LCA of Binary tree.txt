findPath(Node root, ArrayList<Node> p, int n){
    if(root==null) return false;
    p.add(root);
    if(root.key == n) return true;
    if(findPath(root.left, p, n1) || findPath(root.right, p ,n2)){
        return true;
    }
    p.remove(p.size()-1);
    return false;

}


LCA(Node root, int n1, int n2){
    ArrayList<Node> path1 = new ArrayList<>();
    ArrayList<Node> path2 = new ArrayList<>();

    if(findPath(root, path1, n1)==false || findPath(root, path2, n2)==false){
        return null;
    }
    for(int i=0; i<path1.size()-1 && i<path2.size()-1; i++){
        if(path1[i+1] != path2[i+1])
        return path1[i];
    }
    return null;
}